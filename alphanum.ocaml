(* alphanumcmp - compares by alphanum algorithm *)
(* (C) 2007 Andre Bogus
based on the improved java version by Andre Bogus
which in turn is based on the original by Dave Koelle
Distributed under same license as original

Released under the MIT License - https://opensource.org/licenses/MIT

Copyright 2007-2017 David Koelle

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the "Software"),
to deal in the Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute, sublicense,
and/or sell copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
USE OR OTHER DEALINGS IN THE SOFTWARE.
*)
let len = String.length;;

let isnum s i = let c = String.get s i in c >= '0' && c <= '9';;

let chunk s f t = (f < len s) && (t < len s)
       && (isnum s f) = (isnum s t);;

let chunkto s f =
       let rec to_ s f e = if chunk s f e then to_ s f (e + 1) else e in       to_ s f f;;

let alphanumcmp a b =
       let rec chunkcmp a ai b bi = let al, bl = len a, len b in
               if ai >= al || bi >= bl then compare al bl else
               let ae, be = chunkto a ai, chunkto b bi in
               let sa, sb = String.sub a ai (ae-ai), String.sub b bi (be-bi) in
               let cmp = if isnum a ai && isnum b bi then
                       compare (int_of_string sa) (int_of_string sb) else compare sa sb in
               if cmp = 0 then chunkcmp a ae b be else cmp
       in chunkcmp a 0 b 0;;

let names = [ "1000X Radonius Maximus"; "10X Radonius"; "200X Radonius"; "20X Radonius"; "20X Radonius Prime"; "30X Radonius"; "40X Radonius"; "Allegia 50 Clasteron"; "Allegia 500 Clasteron"; "Allegia 51 Clasteron"; "Allegia 51B Clasteron"; "Allegia 52 Clasteron"; "Allegia 60 Clasteron"; "Alpha 100"; "Alpha 2"; "Alpha 200"; "Alpha 2A";  "Alpha 2A-8000"; "Alpha 2A-900"; "Callisto Morphamax"; "Callisto Morphamax 500"; "Callisto Morphamax 5000"; "Callisto Morphamax 600"; "Callisto Morphamax 700"; "Callisto Morphamax 7000"; "Callisto Morphamax 7000 SE";"Callisto Morphamax 7000 SE2"; "QRS-60 Intrinsia Machine"; "QRS-60F Intrinsia Machine"; "QRS-62 Intrinsia Machine"; "QRS-62F Intrinsia Machine"; "Xiph Xlater 10000"; "Xiph Xlater 2000"; "Xiph Xlater 300"; "Xiph Xlater 40"; "Xiph Xlater 5"; "Xiph Xlater 50"; "Xiph Xlater 500"; "Xiph Xlater 5000"; "Xiph Xlater 58" ];;

let print s = print_string s; print_string "\n" in
List.iter print (List.sort alphanumcmp names);;
